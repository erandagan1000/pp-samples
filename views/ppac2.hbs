<div><a href="/">Home</a></div>
<h1>PP Rest API - Advanced Checkout</h1>
<div id="paypal-button-container"></div>
<div id="paypal-result-container"></div>

<table border="0" align="center" valign="top" bgcolor="#FFFFFF" style="width: 39%">
  <tr>
    <td colspan="2">
      <div id="paypal-button-container"></div>
    </td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" id="payment-result">&nbsp;</td>
  </tr>
</table>

<div align="left"> or </div>

<!-- Advanced credit and debit card payments form -->
<div class="card_container" style="display: flex;margin-left:-5px">
  <form id="card-form" style="justify-content: flex-start;">

    <label for="card-number">Card Number</label>
    <input type="text" id="card-number" class="card_field" />
    <div>
      <label for="expiration-date">Expiration Date</label>
      <input type="text" id="expiration-date" class="card_field" />
    </div>
    <div>
      <label for="cvv">CVV</label>
      <input type="text" id="cvv" class="card_field" />
    </div>
    <label for="card-holder-name">Name on Card</label>
    <input type="text" id="card-holder-name" name="card-holder-name" autocomplete="off"
      placeholder="card holder name" />
    <div>
      <label for="card-billing-address-street">Billing Address</label>
      <input type="text" id="card-billing-address-street" name="card-billing-address-street" autocomplete="off"
        placeholder="street address" />
    </div>
    <div>
      <label for="card-billing-address-unit">&nbsp;</label>
      <input type="text" id="card-billing-address-unit" name="card-billing-address-unit" autocomplete="off"
        placeholder="unit" />
    </div>
    <div>
      <input type="text" id="card-billing-address-city" name="card-billing-address-city" autocomplete="off"
        placeholder="city" />
    </div>
    <div>
      <input type="text" id="card-billing-address-state" name="card-billing-address-state" autocomplete="off"
        placeholder="state" />
    </div>
    <div>
      <input type="text" id="card-billing-address-zip" name="card-billing-address-zip" autocomplete="off"
        placeholder="zip / postal code" />
    </div>
    <div>
      <input type="text" id="card-billing-address-country" name="card-billing-address-country" autocomplete="off"
        placeholder="country code" />
    </div>
    <br /><br />
    <button value="submit" id="submit" class="btn">Pay</button>
  </form>
</div>
<script
  src="https://www.paypal.com/sdk/js?components=buttons,hosted-fields&client-id=AY30GJsxw_QS7g7HaAeCW58FcbcSHVL82ixgep50NtkTBgSYqVqTpMD_5VO01ILjH2AdFUAuFm-aJ0CC"
  data-client-token="eyJicmFpbnRyZWUiOnsiYXV0aG9yaXphdGlvbkZpbmdlcnByaW50IjoiNjg1Y2UwMmY4ZDNhY2YyYjcyMzc0ZDY3MGVlMDU1ZDcxNGI5NzFmMDRhZjY4NWY0N2FmMTdmZDEwMGY3OTg5NXxtZXJjaGFudF9pZD1yd3dua3FnMnhnNTZobTJuJnB1YmxpY19rZXk9NjNrdm4zN3Z0MjlxYjRkZiZjcmVhdGVkX2F0PTIwMjItMDItMTBUMDk6MDI6MDQuNzczWiIsInZlcnNpb24iOiIzLXBheXBhbCJ9LCJwYXlwYWwiOnsiaWRUb2tlbiI6ImV5SnJhV1FpT2lKbE5EQTJOakE0WWpVMFlUazBORGd4WWprMVl6YzFOREkwT0dOak1USXpaaUlzSW5SNWNDSTZJa3BYVkNJc0ltRnNaeUk2SWxKVE1qVTJJbjAuZXlKcGMzTWlPaUpvZEhSd2N6b3ZMMkZ3YVM1ellXNWtZbTk0TG5CaGVYQmhiQzVqYjIwaUxDSmhkRjlvWVhOb0lqb2lhbEIzZVdabVQxWXlNemQyZWpWRmRXRXlUMjR0WnlJc0luSnZiR1VpT2lKTlJWSkRTRUZPVkNJc0luTmxjM05wYjI1ZmFXNWtaWGdpT2lKdWVHUTBNWGxzUm5WU2FVaGlabE5yYjJ4MmVWQjVWRk5STTNVaUxDSmpiR2xsYm5SZmFXUWlPaUpCV1RNd1IwcHplSGRmVVZNM1p6ZElZVUZsUTFjMU9FWmpZbU5UU0ZaTU9ESnBlR2RsY0RVd1RuUnJWRUpuVTFseFZuRlVjRTFFWHpWV1R6QXhTVXhxU0RKQlpFWlZRWFZHYlMxaFNqQkRReUlzSW1GamNpSTZXeUpqYkdsbGJuUWlYU3dpWVhWa0lqb2lRVmt6TUVkS2MzaDNYMUZUTjJjM1NHRkJaVU5YTlRoR1kySmpVMGhXVERneWFYaG5aWEExTUU1MGExUkNaMU5aY1ZaeFZIQk5SRjgxVms4d01VbE1ha2d5UVdSR1ZVRjFSbTB0WVVvd1EwTWlMQ0poZFhSb1gzUnBiV1VpT2pFMk5EUTBPRE0zTWpVc0ltRjZJam9pWjJOd0xuTnNZeUlzSW5OamIzQmxjeUk2V3lKQ2NtRnBiblJ5WldVNlZtRjFiSFFpWFN3aVpYaHdJam94TmpRME5EZzBOakkxTENKcFlYUWlPakUyTkRRME9ETTNNalVzSW1wMGFTSTZJbFV5UVVGSlNYWk9jV3AyZUVKd2FGcERWM1ZoTkRWUVdEQnNlakJPVkdaWlJqRkdOa3cyTldoSUxVbzFOWGxMVFRWWU5qQllhM2RFVURGWFRqUnFPVnBxYUVac2FWbHpZMlJoU3pKM2NGWnhRVWM1VlZKWWQzbFhaSGR5VUZnMmIwRTFjUzA0WW5Cd2RtNWpUelJUYmpVMlVscGtOWGx0ZW5KTk1WQlhkVUYzSW4wLkpObnlGTEtyY2xwZ3pwLU1OWXRLazI0V0pDb2MtU2paQk55bzZiT0ZzRHhYNHpXbGJWcXVFZWRXTHRCWHp2Y1NzUGxzQmpQeENzQVVXempLaFA5Z3JWSU55aFhqTUxyXzlaMGxmZmloczBkMzdGbFNvcTdOTWZyS0UxSDIwQzFycU9rQlBkUERsY1BxMEhVdXNMVzZocG8zS2F4ak5CcVl0SUVLWFl1cXlmWWZzMWFCbmZDTlRMSFpTQTNpNTBHak11aVkwS2tGel80YVN2UE5rWW9iRGxBUjFiV1pqaWNFSERSa1BxVVlVU2FIOC1kaXN5ajBsODJCbGN5Y1gyTnNQTU9hYld1MWRUSHVRNjlrLUo1SVdSbzZySEpIbUZqRFAyQjB6OHlkYkI2eVpWX3FMNi1HZXVERW5uQ0dTSk4zQWpaSGl6alplQ3o5ZkhvTkk0US1vdyIsImFjY2Vzc1Rva2VuIjoiQTIxQUFKb21UaWdnekd0WlhvalNSdDdDU1paQVhGOUt2aEoxYVZPVEVWS1Z5NHZCN29jZWNuelFDbzdUalpEZHhpT1NraFVGdXJRRUhnTDNCR2daWUVWVXkwSlIzc3lqUSJ9fQ=="></script>

<!-- Implementation -->
<script>
  var globalClientToken = "";
  // get access token and client-id-token dynamically
  /* var scriptElement = document.createElement("script");
  // scriptElement.src = "https://www.paypal.com/sdk/js?components=buttons,hosted-fields&client-id=AY30GJsxw_QS7g7HaAeCW58FcbcSHVL82ixgep50NtkTBgSYqVqTpMD_5VO01ILjH2AdFUAuFm-aJ0CC";
  scriptElement.id ="pp-script";
  $.ajax('ppapi/auth/accesstoken/generate', {
    type: 'POST',  // http method
    data: {},  // data to submit
    success: function (data, status, xhr) {
      console.log(data);
      const accesstoken = data.access_token;

      $.ajax('/auth/clienttoken/generate', {
        type: 'POST',
        headers: {
          'Authorization': `Bearer ${accesstoken}`
        },
        date: {},
        success: function (data, status, xhr) {
           console.log(data.client_token);
           globalClientToken = data.client_token;
           scriptElement["data-client-token"] = data.client_token;
          
           document.body.appendChild(scriptElement);
          
          

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
        }

      });

    },
    error: function (jqXhr, textStatus, errorMessage) {
      console.log(errorMessage);
    }
  });
*/
  let orderId;

  // Displays PayPal buttons
  paypal.Buttons({
    style: {
      layout: 'horizontal'
    },
    createOrder: function (data, actions) {
      return actions.order.create({
        purchase_units: [{
          amount: {
            value: "1.00"
          }
        }]
      });
    },
    onApprove: function (data, actions) {
      return actions.order.capture().then(function (details) {
        // console.log(details);
        $("#payment-result").text(`Payment success: \n ${JSON.stringify(details)}`);
        // alert(`Payment success: \n ${JSON.stringify(details)}`);
      });
    }
  }).render("#paypal-button-container");

  // If this returns false or the card fields aren't visible, see Step #1.
  if (paypal.HostedFields.isEligible()) {

    // Renders card fields
    paypal.HostedFields.render({
      // Call your server to set up the transaction
      createOrder: function () {
        return fetch('/ppapi/order', {
          method: 'post'
        }).then(function (res) {
          console.log(res);
          return res.json();
        }).then(function (orderData) {
          orderId = orderData.id;
          return orderId;
          console.log(orderData);

        });
      },

      styles: {
        '.valid': {
          'color': 'green'
        },
        '.invalid': {
          'color': 'red'
        }
      },

      fields: {
        number: {
          selector: "#card-number",
          placeholder: "4111 1111 1111 1111"
        },
        cvv: {
          selector: "#cvv",
          placeholder: "123"
        },
        expirationDate: {
          selector: "#expiration-date",
          placeholder: "MM/YY"
        }
      }
    }).then(function (cardFields) {
      document.querySelector("#card-form").addEventListener('submit', (event) => {
        event.preventDefault();

        cardFields.submit({
          // Cardholder's first and last name
          cardholderName: document.getElementById('card-holder-name').value,
          // Billing Address
          billingAddress: {
            // Street address, line 1
            streetAddress: document.getElementById('card-billing-address-street').value,
            // Street address, line 2 (Ex: Unit, Apartment, etc.)
            extendedAddress: document.getElementById('card-billing-address-unit').value,
            // State
            region: document.getElementById('card-billing-address-state').value,
            // City
            locality: document.getElementById('card-billing-address-city').value,
            // Postal Code
            postalCode: document.getElementById('card-billing-address-zip').value,
            // Country Code
            countryCodeAlpha2: document.getElementById('card-billing-address-country').value
          }
        }).then(function () {
          let data = {orderId};
          
          fetch('/ppapi/order/capture/', {
            method: 'post',
            body: JSON.stringify(data)
          }).then(function (res) {
            return res.json();
          }).then(function (orderData) {
            // Three cases to handle:
            // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
            // (2) Other non-recoverable errors -> Show a failure message
            // (3) Successful transaction -> Show confirmation or thank you

            // This example reads a v2/checkout/orders capture response, propagated from the server
            // You could use a different API or structure for your 'orderData'
            var errorDetail = Array.isArray(orderData.details) && orderData.details[0];

            if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
              return actions.restart(); // Recoverable state, per:
              // https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
            }

            if (errorDetail) {
              var msg = 'Sorry, your transaction could not be processed.';
              if (errorDetail.description) msg += '\n\n' + errorDetail.description;
              if (orderData.debug_id) msg += ' (' + orderData.debug_id + ')';
              return alert(msg); // Show a failure message
            }

            // Show a success message or redirect
            alert('Transaction completed!');
          })
        }).catch(function (err) {
          console.log(JSON.stringify(err));
          alert('Payment could not be captured! ' + JSON.stringify(err))
        });
      });
    });
  } else {
    // Hides card fields if the merchant isn't eligible

    document.querySelector("#card-form").style = 'display: none';
  }


  // ensure data-client-token added to script tag as attribute then execute ppSetup()
  /*scriptElement.onload = function () {
    console.log("Successfully loaded script 1 using (onload).");
    $("#pp-script").attr('data-client-token', globalClientToken);
    console.log($("#pp-script")[0].attributes[3].name,":", $("#pp-script")[0].attributes[3].nodeValue);
    ppSetup()
  };
*/

</script>