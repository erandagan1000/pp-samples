<html>

<head>

  <meta charset="utf-8" />

  <!-- Optimal rendering on mobile devices. -->
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Sample CSS styles for demo purposes. You can override these styles to match your web page's branding. -->
  <link rel="stylesheet" type="text/css"
    href="https://www.paypalobjects.com/webstatic/en_US/developer/docs/css/cardfields.css" />

</head>

<body>

  <div class="loading" id="loading-button">Loading paypal button...</div>

  <div><a href="/">Home</a></div>
  <h1>{{title}}</h1>

  <div id="payment-view">
    <!-- Buttons container -->
    <div style="padding:10px">
      <table border="0" align="left" valign="top" bgcolor="#FFFFFF" style="width: 39%">
        <tr>
          <td>
            <div id="paypal-button-container"></div>
          </td>
        </tr>

        <tr>
          <td> - OR - </td>
        </tr>
        <TR><TD><a href="https://developer.paypal.com/dashboard/creditCardGenerator" target="_blank">
        Credit Card Generator</a></TD></TR>
        <tr>
          <td>
            <!-- Advanced credit and debit card payments form -->
            <div id="card-fields" name="card-fields">
              <form id="card-form" name="card-form">
                <label for="card-number">Card Number</label>
                <div id="card-number" class="card_field"></div>
                <div>
                  <label for="expiration-date">Expiration Date </label>
                  <div id="expiration-date" class="card_field"></div>
                </div>
                <div>
                  <label for="cvv">CVV (Optional)</label>
                  <div id="cvv" class="card_field"></div>
                </div>
                <div style="display:none;">
                  <label for="card-holder-name">Name on Card</label>
                  <input type="text" id="card-holder-name" name="card-holder-name" autocomplete="off"
                    placeholder="card holder name" />
                  <div>
                    <label for="card-billing-address-street">Billing Address</label>
                    <input type="text" id="card-billing-address-street" name="card-billing-address-street"
                      autocomplete="off" placeholder="street address" />
                  </div>
                  <div>
                    <label for="card-billing-address-unit">&nbsp;</label>
                    <input type="text" id="card-billing-address-unit" name="card-billing-address-unit"
                      autocomplete="off" placeholder="unit" />
                  </div>
                  <div>
                    <input type="text" id="card-billing-address-city" name="card-billing-address-city"
                      autocomplete="off" placeholder="city" />
                  </div>
                  <div>
                    <input type="text" id="card-billing-address-state" name="card-billing-address-state"
                      autocomplete="off" placeholder="state" />
                  </div>
                  <div>
                    <input type="text" id="card-billing-address-zip" name="card-billing-address-zip" autocomplete="off"
                      placeholder="zip / postal code" />
                  </div>
                  <div>
                    <label for="card-billing-address-country">Country Code</label>
                    <input type="text" id="card-billing-address-country" name="card-billing-address-country"
                      autocomplete="off" placeholder="country code e.g. US" />
                  </div>
                </div>


                <br /><br />
                <button value="submit" id="submit" class="btn">Pay</button>
              </form>
            </div>

          </td>
        </tr>

        <tr>
          <td>
            CC Payment result <br>

            <div colspan="2" id="payment-result-cc">&nbsp;</div>
          </td>
        </tr>

      </table>
    </div>
  </div>

  
  <div id="payment-result-title">&nbsp; </div>
  <div id="payment-result">&nbsp; </div>

  <!-- Implementation -->
  <script src="https://unpkg.com/@paypal/paypal-js@5.0.3/dist/iife/paypal-js.min.js"></script>
  <script>
    // import { loadScript } from "@paypal/paypal-js";

    $("#loading-button").show();
    let orderId;
    var globalClientToken = "";
    let paypal;

    try {

      const myDataClientPromise = new Promise(generateDataClientToken);
      myDataClientPromise.then((data) => {
        console.log("reolved client token:", data);
        window.paypalLoadScript({
          // "locale": 'pl_PL',
          "client-id": "AbfWHDmsApd4IM7TDiLYpsjH28utsEt-XfxVOxnE9SKbtSziPLp_LhMToOKgVKjXR7BVhDw6Pvw89ALk",
          "data-client-token": globalClientToken,
          "components": "buttons,hosted-fields"
        }).then((pp) => {
          paypal = pp;
          if (paypal) {
            try {

              loadUiControls();

            } catch (error) {
              console.error("failed to render the PayPal Buttons", error);
            }
          }


        }).catch((error) => {
          console.error("failed to load the PayPal JS SDK script", error);
        });

      });
    }

    catch (error) {
      console.error("failed to load the PayPal JS SDK script", error);
    }

    function generateDataClientToken(resolve, reject) {

      $.ajax('ppapi/auth/accesstoken/generate', {
        type: 'POST',  // http method
        data: {},  // data to submit
        success: function (data, status, xhr) {
          console.log(data);
          const accesstoken = data.access_token;

          $.ajax('ppapi/auth/clienttoken/generate', {
            type: 'POST',
            headers: {
              'Authorization': `Bearer ${accesstoken}`
            },
            data: {},
            success: function (data, status, xhr) {
              console.log(data.client_token);
              globalClientToken = data.client_token;
              resolve(data.client_token);
            },
            error: function (jqXhr, textStatus, errorMessage) {
              console.log(errorMessage);
              reject(errorMessage);
            }

          });

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
          reject(errorMessage);
        }
      });
    }

    function loadUiControls() {

      // Displays PayPal buttons
      paypal.Buttons({
        style: {
          layout: 'vertical'
        },
        createOrder: function (data, actions) {
          return actions.order.create({
            purchase_units: [{
              amount: {
                value: "1.00"
              }
            }]
          });
        },
        onApprove: function (data, actions) {
          return actions.order.capture().then(function (details) {
            // window.location.href = '/success.html';
            // $("#payment-result").text(`Payment success: \n ${JSON.stringify(details)}`);
            $("#payment-result-title").text("Paypal Payment Result")
            $("#payment-result").jsonViewer(details);
            document.querySelector("#payment-view").style = 'display: none';

          });
        }
      }).render("#paypal-button-container").then(() => {
        console.log("render executed");
        $("#loading-button").hide();
      });

      // If this returns false or the card fields aren't visible, see Step #1.
      if (paypal.HostedFields.isEligible()) {

        // Renders card fields
        paypal.HostedFields.render({
          // Call your server to set up the transaction
          createOrder: function () {
            return fetch('/ppapi/order', {
              method: 'post'
            }).then(function (res) {
              return res.json();
            }).then(function (orderData) {
              orderId = orderData.id;
              return orderId;
            });
          },

          styles: {
            '.valid': {
              'color': 'green'
            },
            '.invalid': {
              'color': 'red'
            }
          },

          fields: {
            number: {
              selector: "#card-number",
              placeholder: "card number"
            },
            cvv: {
              selector: "#cvv",
              placeholder: "123"
            },
            expirationDate: {
              selector: "#expiration-date",
              placeholder: "MM/YY"
            }
          }
        }).then(function (cardFields) {
          $("#loading-button").hide();
          document.querySelector("#card-form").addEventListener('submit', (event) => {
            event.preventDefault();

            cardFields.submit({
              // Cardholder's first and last name
              //cardholderName: document.getElementById('card-holder-name').value,
              // Billing Address
              //billingAddress: {
              // Street address, line 1
              //   streetAddress: document.getElementById('card-billing-address-street').value,
              // Street address, line 2 (Ex: Unit, Apartment, etc.)
              //   extendedAddress: document.getElementById('card-billing-address-unit').value,
              // State
              //   region: document.getElementById('card-billing-address-state').value,
              // City
              //   locality: document.getElementById('card-billing-address-city').value,
              // Postal Code
              //  postalCode: document.getElementById('card-billing-address-zip').value,
              // Country Code
              //    countryCodeAlpha2: document.getElementById('card-billing-address-country').value
              //   }
            }).then(function () {
              fetch('/ppapi/order/' + orderId + '/capture/', {
                method: 'post'
              }).then(function (res) {
                return res.json();
              }).then(function (orderData) {
                // Three cases to handle:
                //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
                //   (2) Other non-recoverable errors -> Show a failure message
                //   (3) Successful transaction -> Show confirmation or thank you

                // This example reads a v2/checkout/orders capture response, propagated from the server
                // You could use a different API or structure for your 'orderData'
                var errorDetail = Array.isArray(orderData.details) && orderData.details[0];

                if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
                  return actions.restart(); // Recoverable state, per:
                  // https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
                }

                if (errorDetail) {
                  var msg = 'Sorry, your transaction could not be processed.';
                  if (errorDetail.description) msg += '\n\n' + errorDetail.description;
                  if (orderData.debug_id) msg += ' (' + orderData.debug_id + ')';
                  return alert(msg); // Show a failure message
                }

                // Show a success message or redirect
                console.log('Transaction completed!');
                // $("#payment-result-cc").text(`Payment success: \n ${JSON.stringify(orderData)}`);
                $("#payment-result-cc").jsonViewer(orderData);
                var cardFieldsElem = $("#card-fields");
                console.log(cardFieldsElem)
                cardFieldsElem.hide();
              })
            }).catch(function (err) {
              alert('Payment could not be captured! ' + JSON.stringify(err))
            });
          });
        });
      } else {
        // Hides card fields if the merchant isn't eligible
        var cardFieldsElem = document.querySelector("#card-fields");
        console.log(cardFieldsElem)
        cardFieldsElem.hide();
      }

    }
  </script>

</body>

</html>