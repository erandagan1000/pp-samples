<html>

<head>

  <meta charset="utf-8" />
  <!-- Optimal rendering on mobile devices. -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
  <div class="loading" id="loading-button">Loading paypal button...</div>

  <div><a href="/">Home</a></div>
  <h1>{{title}}</h1>

  <br>
  <div class="row mt-2">
    <div class="col-6 text-center">
      <h3>SAVE DURING PURCHASE</h3>
    </div>
    <div class="col-6 text-center">
      <h3>SAVE FOR LATER PURCHASE</h3>
    </div>
  </div>
  <div class="row mt-2">
    <div class="col-6">
      <div id="payment-view">
        <!-- Buttons container -->
        <div id="paypal-button-container"></div>

      </div>

    </div>
    <div class="col-6">
      <div id="payment-view-save-for-later">
        <!-- Buttons container -->
        <div id="paypal-button-container-save-for-later"></div>
      </div>



    </div>
  </div>
  <div class="row mt-2">
    <div class="col-6" id="return-ux-div"><button class="btn btn-primary" onclick="createButton(true)"
        style="width:fit-content">RELOAD FOR RETURNING USER EXP.
      </button></div>
    <div class="col-6">
      <div class="label label-primary" id="div-vaulted-customer-id"
        style="margin-top:10px;background-color:rgb(210, 211, 231);width:298px">Place Holder for saved customer</div>
    </div>
  </div>



  <div id="payment-result">&nbsp;</div>


  <!-- Implementation -->
  <script src="https://unpkg.com/@paypal/paypal-js/dist/iife/paypal-js.min.js"></script>
  <script>


    $("#loading-button").show();
    let orderId;
    var globalUserIdToken = "";
    let paypal;
    let vaultedCustomerId = "";
    let cId = "";
    let mId = "";
    document.querySelector("#return-ux-div").style = 'display: none';


    function createButton(isRetruning, clientId, merchantId) {
      try {

        let myDataClientPromise;
        if (isRetruning) {
          myDataClientPromise = new Promise(generateDataClientTokenForReturningUser);
        }
        else {
          myDataClientPromise = new Promise(generateDataClientToken);
        }

        myDataClientPromise.then((data) => {
          console.log("reolved client token:", data);
          window.paypalLoadScript({
            "client-id": clientId || cId,
            "data-user-id-token": globalUserIdToken,
            "components": "buttons,hosted-fields",
            "buyer-country": "US",
            "merchant-id": merchantId || mId

          }).then((pp) => {
            paypal = pp;
            if (paypal) {
              try {

                loadUiControlsSaveDuringPurchase(isRetruning);
                loadUiControlsSaveForLaterPurchase();

              } catch (error) {
                console.error("failed to render the PayPal Buttons", error);
              }
            }


          }).catch((error) => {
            console.error("failed to load the PayPal JS SDK script", error);
          });

        });
      }

      catch (error) {
        console.error("failed to load the PayPal JS SDK script", error);
      }

    }

    function generateDataClientToken(resolve, reject) {
      document.querySelector("#payment-result").style = 'display: none';

      $.ajax('ppapi/auth/accesstoken/generate', {
        type: 'POST',  // http method
        data: {},  // data to submit
        success: function (data, status, xhr) {
          console.log(data);
          const accesstoken = data.access_token;
          globalUserIdToken = data.id_token;

          $.ajax('/ppapi/auth/clienttoken/generate', {
            type: 'POST',
            headers: {
              'Authorization': `Bearer ${accesstoken}`
            },
            success: function (data, status, xhr) {
              console.log(data.client_token);
              resolve(data);
            },
            error: function (jqXhr, textStatus, errorMessage) {
              console.log(errorMessage);
              reject(errorMessage);
            }

          });

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
          reject(errorMessage);
        }
      });
    }

    function generateDataClientTokenForReturningUser(resolve, reject) {
      document.querySelector("#payment-result").style = 'display: none';

      $.ajax('ppapi/auth/accesstoken/generate', {
        type: 'POST',  // http method
        data: {},  // data to submit
        success: function (data, status, xhr) {
          console.log(data);

          const accesstoken = data.access_token;
          vaultedCustomerId = vaultedCustomerId || localStorage.getItem('vaultedCustomerId');

          if (!vaultedCustomerId) {
            console.log("Using Default CustomerId");
            vaultedCustomerId = "qoeThVmauU";
          }
          $.ajax('/ppapi/auth/clienttoken/generate/customerid', {
            type: 'POST',
            headers: {
              'Authorization': `Bearer ${accesstoken}`
            },
            data: { customer_id: vaultedCustomerId },   //vaultedCustomerId
            success: function (data, status, xhr) {

              //Should be set here, since sending the customerID
              globalUserIdToken = data.id_token;
              resolve(data);
            },
            error: function (jqXhr, textStatus, errorMessage) {
              console.log(errorMessage);
              reject(errorMessage);
            }

          });

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
          reject(errorMessage);
        }
      });
    }

    function loadUiControlsSaveDuringPurchase(isRetruning) {

      // Displays PayPal buttons
      paypal.Buttons({
        style: {
          layout: 'vertical'
        },
        createOrder: function (data, actions) {
          var apiUrl = isRetruning ? '/ppapi/order/vault-checkout' : '/ppapi/order/vault-payment-method';
          return fetch(apiUrl, {
            method: 'post',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ source: data.paymentSource }),
          }).then(function (res) {
            console.log("RESOLVED1: createOrder: ", res);
            return res.json();
          }).then(function (orderData) {
            orderId = orderData.id;
            console.log("RESOLVED: createOrder: ", orderData);
            return orderId;
          });
        },
        onApprove: function (data, actions) {

          return fetch('/ppapi/order/' + data.orderID + '/capture', {
            method: 'post'
          }).then(function (result) {
            return result.json();

          }).then(function (resJson) {

            console.log("resJson: ", resJson);
            if (!isRetruning) {
              vaultedCustomerId = resJson.payment_source.paypal.attributes.vault.customer.id;
              // vaultedCustomerId = resJson.payment_source.paypal.attributes.vault.id; 
              localStorage.setItem('vaultedCustomerId', vaultedCustomerId);
            }

            document.querySelector("#div-vaulted-customer-id").innerHTML = `<H2 ><b>Saved CsutomerId: </b>${vaultedCustomerId}</H2>`;
            // $("#payment-result").jsonViewer(resJson);
            document.querySelector("#payment-result").innerHTML = `<H3><font color='green'>Payment Processed Successfully By: ${resJson.payer.email_address}</font></H3>`;
            document.querySelector("#payment-view").style = 'display: none';
            document.querySelector("#payment-result").style = 'display: block';

            document.querySelector("#return-ux-div").style = 'display: block';


          });

        }
      }).render("#paypal-button-container").then(() => {
        console.log("render executed");
        $("#loading-button").hide();
        document.querySelector("#payment-view").style = 'display: block';
      });

    }

    function loadUiControlsSaveForLaterPurchase(isRetruning) {

      // Displays PayPal buttons
      paypal.Buttons({
        style: {
          layout: 'vertical'
        },
        createVaultSetupToken: function () {
          // Call your server API to generate a setup token
          // and return it here as a string
          return fetch("/ppapi/order/vault/setup-tokens", {
            method: 'post',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },

          }).then(function (res) {

            console.log("RESOLVED1: createVaultSetupToken: ", res);
            return res.json();
          }).then(function (setupTokenData) {

            console.log("RESOLVED2: createOrder: ", setupTokenData);
            return setupTokenData.id;
          });

        },
        onApprove: function (data) {
          console.log("onApproveData: ", data);
          return fetch("ppapi/order/vault/create-payment-token",
            {
              method: "post",
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ vaultSetupToken: data.vaultSetupToken })
            }).then(function (result) {
              return result.json();
            }).then(function (resJson) {

              console.log("resJson: ", resJson);
              if (!isRetruning) {
                vaultedCustomerId = resJson.customer.id;
                // vaultedCustomerId = resJson.payment_source.paypal.attributes.vault.id; 
                localStorage.setItem('vaultedCustomerId', vaultedCustomerId);
              }

              document.querySelector("#div-vaulted-customer-id").innerHTML = `<H2 ><b>Saved CsutomerId: </b>${vaultedCustomerId}</H2>`;
              // $("#payment-result").jsonViewer(resJson);
              document.querySelector("#payment-result").innerHTML = `<H3><font color='green'>Payment Processed Successfully By: ${resJson.payment_source.paypal.email_address}</font></H3>`;
              document.querySelector("#payment-view").style = 'display: none';
              document.querySelector("#payment-result").style = 'display: block';

              document.querySelector("#return-ux-div").style = 'display: block';


            });


        },
        onError: (error) => {
          console.log("An error occurred: ", error)
        }
      }).render("#paypal-button-container-save-for-later").then(() => {
        console.log("render executed");
        $("#loading-button").hide();
        document.querySelector("#payment-view").style = 'display: block';
      });

    }


    /************START*****************/
    fetch("/ppapi/auth/ppclientid",
      {
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
        }
      }).then(async (data) => {

        const { clientId, merchantId } = await data.json();
        cId = clientId
        mId = merchantId;
        console.log("****cId**** ", cId);
        console.log("****mId**** ", mId);
        createButton(false, cId, mId);

      });
  </script>


</body>

</html>