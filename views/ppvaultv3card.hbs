<html>

<head>

  <meta charset="utf-8" />
  <!-- Optimal rendering on mobile devices. -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
   <div><a href="/">Home</a></div>
  <h1>{{title}}</h1>

  <br>
  <div>
    <div class="loading" id="loading-button">WORKING ON IT...</div>
    <button onclick="createButton(true)" style="width:fit-content">Run returning User
      experience</button>
    <br />
    <div id="div-vaulted-customer-id" style="margin:10px;background-color:yellow;width:100px">&nbsp;</div>
  </div>
  <script src="https://unpkg.com/@paypal/paypal-js/dist/iife/paypal-js.min.js"></script>
  <script
    src="https://www.paypal.com/sdk/js?components=card-fields&client-id=AbfWHDmsApd4IM7TDiLYpsjH28utsEt-XfxVOxnE9SKbtSziPLp_LhMToOKgVKjXR7BVhDw6Pvw89ALk&currency=USD&intent=capture&merchant-id=BVKWTJDWMSX48"></script>
  <div id="payment-view">
    <!-- Buttons container -->
    <div style="padding:10px">
      <table border="0" align="left" valign="top" bgcolor="#FFFFFF" style="width:100%">
        <tr>
          <td>
            <div id="card-form-container">
              <div class='card_container'>
                <div id='card-number'></div>
                <div id='expiration-date'></div>
                <div id='cvv'></div>
                <div id='card-holder-name'></div>
                <label>
                  <input type='checkbox' id='vault' name='vault' /> Vault
                </label>
                <br><br>
                <button value='submit' id='submit' class='btn btn-primary'>Pay</button>
              </div>

            </div>
          </td>
        </tr>
      </table>

    </div>

  </div>

  <p>

  <h3>Saved Payment Methods:</h3>
  <table id="tbl-payment-methods" class="table table-dark"></table>

  <h3>Result:</h3>
  <div id="payment-result">&nbsp;</div>


  </p>
  <!-- Implementation -->
  <script>

    $("#loading-button").show();
    let orderId;
    var globalUserIdToken = "";
    let paypal;
    let vaultedCustomerId = "";


    function createButton(isRetruning) {
      try {
        $("#loading-button").show();
        $("#payment-result").hide();
        let myDataClientPromise;
        if (isRetruning) {
          myDataClientPromise = new Promise(generateListOfSavedPaymentMethodsForReturningUser);
        }
        else {
          myDataClientPromise = new Promise(generateDataClientToken);
        }

        myDataClientPromise.then((data) => {
          console.log("reolved client token:", data);
          if (isRetruning) {
            $("#payment-result").jsonViewer(data);
            var list = data.payment_tokens.map(pm => `<tr><td>${pm.id} </td><td> ${pm.customer.id} </td><td> ${pm.payment_source.card.last_digits} </td><td> ${pm.payment_source.card.brand} </td><td> ${pm.payment_source.card.expiry} </td></tr>`);

            document.getElementById("tbl-payment-methods").innerHTML = list.join(" ");
            document.querySelector("#payment-view").style = 'display: none';
            document.querySelector("#payment-result").style = 'display: block';
            $("#loading-button").hide();
            $("#payment-result").show();
          }
          else {
            window.paypalLoadScript({
              "client-id": "AbfWHDmsApd4IM7TDiLYpsjH28utsEt-XfxVOxnE9SKbtSziPLp_LhMToOKgVKjXR7BVhDw6Pvw89ALk",
              "data-user-id-token": globalUserIdToken,
              "components": "card-fields",
              "currency": "USD",
              "intent": "capture",
              "merchant-id": "BVKWTJDWMSX48"

            }).then((pp) => {
              paypal = pp;
              if (paypal) {
                try {

                  loadUiControls();

                } catch (error) {
                  console.error("failed to render the PayPal Buttons", error);
                }
              }


            }).catch((error) => {
              console.error("failed to load the PayPal JS SDK script", error);
            });


          }


        });
      }

      catch (error) {
        console.error("failed to load the PayPal JS SDK script", error);
      }

    }

    function generateDataClientToken(resolve, reject) {
      document.querySelector("#payment-result").style = 'display: none';

      $.ajax('ppapi/auth/accesstoken/generate', {
        type: 'POST',  // http method
        data: {},  // data to submit
        success: function (data, status, xhr) {
          console.log(data);
          const accesstoken = data.access_token;
          globalUserIdToken = data.id_token;

          $.ajax('/ppapi/auth/clienttoken/generate', {
            type: 'POST',
            headers: {
              'Authorization': `Bearer ${accesstoken}`
            },
            success: function (data, status, xhr) {
              console.log(data.client_token);
              resolve(data);
            },
            error: function (jqXhr, textStatus, errorMessage) {
              console.log(errorMessage);
              reject(errorMessage);
            }

          });

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
          reject(errorMessage);
        }
      });
    }

    function generateListOfSavedPaymentMethodsForReturningUser(resolve, reject) {
      document.querySelector("#payment-result").style = 'display: none';

      $.ajax(`ppapi/order/vault-payment-tokens/${vaultedCustomerId}`, {
        type: 'GET',  // http method
        data: {},  // data to submit
        success: function (data, status, xhr) {
          console.log(data);
          resolve(data);
        },

        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
          reject(errorMessage);
        }
      });
    }

    function loadUiControls() {
      // Create the card fields component and define callbacks
      const cardFields = paypal.CardFields({
        createOrder: async (data) => {
          const saveCheckbox = document.getElementById("save");
          const result = await fetch("/ppapi/order/vault-payment-method", {
            method: "POST",
            body: JSON.stringify({ source: "card", vaultPaymentMethod: saveCheckbox }),
            headers: {
              'Content-Type': 'application/json',
            }
          })
          console.log("createOrderResult: ", result);
          const { id } = await result.json();
          return id;
        },
        onApprove: async (data) => {
          console.log("onApprove Data: ", data);
          const { orderID } = data;
          return fetch('/ppapi/order/' + orderID + '/capture', {
            method: "POST"
          }).then((res) => {
            return res.json();
          }).then((orderData) => {
            // Retrieve vault details from the response
            console.log("captureResponse: ", orderData);
            const vault = orderData.payment_source.card.attributes.vault;

            if (vault) {
              // Save the vault.id and vault.customer.id for future use
              console.log("vaultCustomerId: ", vault.customer.id);
              vaultedCustomerId = vault.customer.id;
              document.querySelector("#div-vaulted-customer-id").innerHTML = `<p>${vaultedCustomerId}</p>`;
              $("#payment-result").jsonViewer(orderData);
              document.querySelector("#payment-view").style = 'display: none';
              document.querySelector("#payment-result").style = 'display: block';
            }
            // Handle successful transaction
          });
        },
        onError: (error) => console.error('Something went wrong:', error)
      });
      // Render each field after checking for eligibility
      // Check eligibility and display advanced credit and debit card payments

      if (cardFields.isEligible()) {
        $("#loading-button").hide();
        document.querySelector("#payment-view").style = 'display: block';
        cardFields.NameField().render("#card-holder-name");
        cardFields.NumberField().render("#card-number");
        cardFields.ExpiryField().render("#expiration-date");
        cardFields.CVVField().render("#cvv");
      } else {
        // Handle workflow when credit and debit cards are not available
        console.log("credit and debit cards are not available");
      }
      const submitButton = document.getElementById("submit");
      submitButton.addEventListener("click", () => {
        cardFields
          .submit()
          .then(() => {
            console.log("submit was successful");

          })
          .catch((error) => {
            console.error("submit erred:", error);
          });
      });


    }

    createButton(false);
  </script>


</body>

</html>