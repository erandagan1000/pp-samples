<div><a href="/">Home</a></div>
<h1>{{title}}</h1>
<h3>Clicking on smart button will trigger a flow to create BA token, followed by creating BA</h3>
<div class="loading" id="loading-button">Loading paypal button...</div>
<div id="paypal-button-container"></div>
<div id="paypal-result-container"></div>
{{!-- PP Rest API simple --}}
{{!-- client-id=AeGY.. #App: MerchantApp | Account: eran.m.il@merchant.com (BusinessPro) --}}

{{!-- This DIV is relevant if doing manual integration with page redirect- NOT RECOMENDED --}}
{{!-- <div id="pp-ba-approve-result">
  <p>Details</p>
  <p>EC Token: <span id="ec-token-container">{{ec_token}}</span></p>
  <p>Billing Agreement Token: <span id="ba-id-container">{{ba_token}}</span></p>
  <p><button id="ba-generate" onclick="generateBa()">Generate BA</button></p>
  <p>Billing agreement Create Result:</p>
  <p id="ba-response"></p>
</div> --}}
<h2>OnApprove Result - data to send to merchant server (BA token)</h2>
<div id="pp-rtco-on-approve-result"></div>
<h2>Server Result - response from merchant server - post BA creation</h2>
<div id="pp-pay-with-ba-button" name="pp-pay-with-ba-button" style="visibility:hidden">
  <button onclick="payWithBillingAgreement()">Pay with BA</button>

</div>
<div id="pp-rtco-server-result"></div>
<hr>
<h2>Server Payment Result - Fraudnet data can be verified</h2>
<div id="pp-rtco-server-pay-result"></div>



{{!---------------------------------SCRIPTS------------------------------------------}}
{{!-- PayPal --}}
<script
  src="https://www.paypal.com/sdk/js?client-id=AaLfG87rC4XN5QisWLhUw27uFUE0KypDXHNySFuya-jNbzKIE4s4a6Yu2q8ylFhMPgw3KflYRGc8Uhjz&currency=USD&components=buttons&vault=true&intent=tokenize">
  </script>

<script src="https://www.paypalobjects.com/api/checkout.js" async></script>


{{!-- PAGE LOGIC --}}
<script>
  
  function uuidv4() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
  }

  var globalAccessToken = "";
  var globalClientToken = "";
  var baTokenId = "";
  var baId = "";
  let guid = uuidv4();
  
  

  $("#loading-button").show();
  paypal.Buttons({
    style: {
      layout: "vertical",
      color: "gold",
      shape: "rect",
      label: "paypal",
      tagline: false,
      height: 55
    },
    createBillingAgreement: function (data, actions) {
      console.log(data, baTokenId);
      return baTokenId;
    },
    onApprove: function (data, actions) {
      console.log("The customer approved the Billing Agreement in the PayPal Checkout Flow", { data, actions });

      $("#pp-rtco-on-approve-result").jsonViewer(data,{collapsed: true, bigNumbers: true});

      let authStr = globalAccessToken;
      if (globalAccessToken.indexOf('Bearer') == -1) {
        authStr = `Bearer ${globalAccessToken}`;
      }

      console.log('data.billingToken', data.billingToken);
      // call merchant api and create BA using PP server SDK , the returned BA can be saved to DB assigned to the customer 
      $.ajax('/ppapi/rt/billing-agreement', {
        type: 'POST',
        headers: { 'Authorization': authStr },
        // headers: undefined,
        data: { token_id: data.billingToken },
        success: function (data, status, xhr) {
          console.log(data);
          $("#pp-rtco-server-result").jsonViewer(data, {collapsed: true, bigNumbers: true});
          $("#pp-pay-with-ba-button").css('visibility', 'visible');
          baId = data.id;

        },
        error: function (jqXhr, textStatus, errorMessage) {
          console.log(errorMessage);
        }
      });

    },
    onCancel: function () {
      console.log("The customer cancelled the PayPal Checkout Flow");
    },
    onError: function () {
      console.log("An error occurred.")
    }
  }).render('#paypal-button-container').then(function () {
    $("#loading-button").hide();
  });

  function generateBaToken() {
    $.ajax('ppapi/rt/flow/start', {
      type: 'POST',
      data: {},
      success: function (data, status, xhr) {
        console.log(data);
        baTokenId = data.token_id;
        globalAccessToken = data.accessToken;
        // const approvalUrl = data.links.find(l => l.rel == 'approval_url').href;
        // if (approvalUrl) {
        //   window.open(approvalUrl);
        //  }

      },
      error: function (jqXhr, textStatus, errorMessage) {
        console.log(errorMessage);
      }
    });
  }

  function payWithBillingAgreement() {
    const payload = { baId, fnGuid: guid };
    console.log(payload);

    $.ajax('/ppapi/rt/pay', {
      type: 'POST',
      headers: { 'Authorization': globalAccessToken },
      // headers: undefined,
      data: payload,
      success: function (data, status, xhr) {
        console.log(data);
        $("#pp-rtco-server-pay-result").jsonViewer(data,{collapsed: true, bigNumbers: true});

      },
      error: function (jqXhr, textStatus, errorMessage) {
        console.log(errorMessage);
      }
    });


  }
  //start
  generateBaToken();


  // #region Integration using page redirect - NOT RECOMENDED 
  /* // Integration using page redirect - NOT RECOMENDED
     // When merchant use his own button and create the order by calling his API, and from there make a call to PP Rest API (server2Server).
     // he procide the return URL and once buyer approve the purchase using his PP account, the page redirect to the return URL with the
     // EC Token EC=xxxx in queryparameter. Then merchant code needs to take this EC token and send it to server to complete payment
     // this can be done also in server while user see the loading indicator until all flow completed.  
    
    paypal.Buttons({
  
      // Sets up the transaction when a payment button is clicked
      createOrder: function (data, actions) {
  
        $.ajax('ppapi/rt/flow/start', {
          type: 'POST',
          data: {},
          success: function (data, status, xhr) {
            console.log(data);
            const approvalUrl = data.links.find(l => l.rel == 'approval_url').href;
            if (approvalUrl) {
              window.open(approvalUrl);
            }
  
          },
          error: function (jqXhr, textStatus, errorMessage) {
            console.log(errorMessage);
          }
        });
  
      }
    }).render('#paypal-button-container').then(function () {
      $("#loading-button").hide();
    });*/

  function generateBa() {
    $.ajax('/ppapi/rt/flow/create-billing-agreement', {
      type: 'POST',
      data: { token_id: baTokenId },
      success: function (data, status, xhr) {
        console.log(data);
        $("#ba-response").html(JSON.stringify(data));

      },
      error: function (jqXhr, textStatus, errorMessage) {
        console.log(errorMessage);
      }
    });

  }
  // #endregion

  // #region MANUAL INTEGRATION - NOT RECOMENDED
  // When merchant does not want to use the smart button but his own button and call the server to create order or billing agreement and sending the return URL
  // After user approves, in response he gets the return url (provided by caller) with EC-token and BA-token , in this example it is returned to client, but the return URL can be 
  // another endpoint which can read the query parameter and complete the transaction (server2Server)
  // http://localhost:3000/ppcort?token=EC-4H4952447G899934X&ba_token=BA-65L40004CN2398355
  const spanEcToken = $("#ec-token-container");
  const spanBaToken = $("#ba-id-container");
  if (spanEcToken.text().length > 0) {
    $("#pp-ba-approve-result").css('visibility', 'visible');
    baTokenId = spanBaToken.text();
  }
  else {
    $("#pp-ba-approve-result").css('visibility', 'hidden');
  }

    // #endregion

</script>

{{!-- Fraudnet - STATIC --}}
{{!-- <script type="application/json" fncls="fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99">
    {
        "f":"a9b8501c-a70a-4968-84d3-1711e33bef3f",
        "s":"ERAN_M_US_PAYPAL_CHECKOUT_VAULT",        
        "sandbox": true
    }
   
</script>
<script type="text/javascript" src="https://c.paypal.com/da/r/fb.js"></script> --}}

{{!-- FRAUDNET - DYNAMIC --}}
<script>

  function _injectConfig(options) {
    console.log("inject");
    var script = document.getElementById('fconfig');
    if (script) {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
    }
    script = document.createElement('script');
    script.id = 'fconfig';
    script.type = 'application/json';
    script.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');
    guid = uuidv4();

    var configuration = {
      'f': guid,
      's': "ERAN_M_US_PAYPAL_RT"
    };
    script.text = JSON.stringify(configuration);
    document.body.appendChild(script);
    
     _loadBeaconJS(options);
  }

  function uuidv4() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
  }
  
  function _loadBeaconJS(options) {
    var script = document.createElement('script');
    script.src = options.fnUrl;
    document.body.appendChild(script);

  }

  const options = { fnUrl: "https://c.paypal.com/da/r/fb.js" };
   _injectConfig(options);

  if (paypal.asyncData && typeof paypal.asyncData.initAndCollect === 'function') {
     paypal.asyncData.initAndCollect()
  } 
</script>