<div><a href="/">Home</a></div>
<h1>{{title}}</h1>
<hr>
<font color="red">Note! Can only be tested on iOS device, with test credit card added to the wallet</font>
<p><a href="https://developer.apple.com/apple-pay/sandbox-testing/" target="_blank">Test credit cards for apple device</a></p>
<!---------------- Apple Pay Button ------------------>
<div>
  <div id="apple-pay-button" class="apple-pay-set-up-button apple-pay-setup-button-white-with-line">&nbsp;
  </div>
  <br>
  <div style="color:blue;font-size:12pt;margin-top:10px">
<input type="checkbox" id="save_for_next_purchase" name="save_for_next_purchase">Save for future payments
  </div>
  
  <div id="support-apple-pay">&nbsp;</div>

</div>


<div>
  {{!-- <button id="generate-token">Generate Access Token</button> --}}
  <div class="loading" id="loading-token">Generating access token...</div>
  <div style="inline-size: 1350px;overflow-wrap: break-word; ">
    <p>Access token: </p>
    <div id="token" style="font-size: 6pt;"></div>
  </div>


  <div class="loading" id="loading-button">Loading paypal button...</div>

</div>
<!-------------------- results -------------------->
<div style="inline-size: 1350px;overflow-wrap: break-word; ">
  <p>onpaymentauthorized payload: </p>
  <div id="payment-authorized-payload">&nbsp;</div>
</div>

<div style="inline-size: 1350px;overflow-wrap: break-word; ">
  <p>BT Tokenize message: </p>
  <div id="bt-tokenize-message">&nbsp;</div>
</div>

<!-------------------- log -------------------->
<div id="log">&nbsp;</div>


<div style="inline-size: 1350px;overflow-wrap: break-word; ">
  <p>Checkout Server result: </p>
  <div id="checkout-result">&nbsp;</div>
</div>

<!-- includes the Braintree JS client SDK -->
<script src="https://js.braintreegateway.com/web/3.85.3/js/client.min.js"></script>
<script src="https://js.braintreegateway.com/web/3.85.3/js/apple-pay.min.js"></script>

<script>

  var selectedCurrency = 'USD'   // e.g. EUR or USD
  var amount = '25.22';
  var tokenSpan = document.querySelector('#token')
  var token = undefined;
  var logElem = $("#log");
  var savePaymentMethodElem = $("#save_for_next_purchase")[0];
  var isSavePaymentMethodChecked = savePaymentMethodElem.checked;

  savePaymentMethodElem.addEventListener("click", function() {
    isSavePaymentMethodChecked = savePaymentMethodElem.checked;
    // alert(isSavePaymentMethodChecked);

  });

  $("#apple-pay-button").hide();

  (function () {
    $.ajax({
      type: 'GET',
      url: '/bt/vault/payment/client_token'
    }).done(function (result) {
      // console.log(result);
      token = result;
      tokenSpan.innerHTML = `${token}`;
      $("#loading-token").hide();

      initApplePayCheckout(token);
    });
  }());

  // -----------------------------------------------------------------

  // paypal checkout
  function initApplePayCheckout(token) {
    $("#loading-button").show();
    // promise style
    // Create a client.
    const applePaySupport = `window.ApplePaySession: ${window.ApplePaySession},<br/>ApplePaySession.supportsVersion(3): ${window.ApplePaySession?.supportsVersion(3)}, <br/>ApplePaySession.canMakePayments(): ${window.ApplePaySession?.canMakePayments()}`;
    logElem.append(`<div>${applePaySupport}</div>`);
    // $("#support-apple-pay").text(applePaySupport);
    if (window.ApplePaySession && window.ApplePaySession.supportsVersion(3) && window.ApplePaySession.canMakePayments()) {
      // This device supports version 3 of Apple Pay.
      if (!window.ApplePaySession) {
        console.error('This device does not support Apple Pay');
        logElem.append(`<font color="red">This device does not support Apple Pay</font>`);
      }

      if (!ApplePaySession.canMakePayments()) {
        console.error('This device is not capable of making Apple Pay payments');
        logElem.append(`<font color="red">This device is not capable of making Apple Pay payments</font>`);
      }

      braintree.client.create({
        authorization: token
      }).then(function (clientInstance) {
        return braintree.applePay.create({
          client: clientInstance
        });
      }).then(function (applePayInstance) {
        // Set up your Apple Pay button here
        var paymentRequest = applePayInstance.createPaymentRequest({
          total: {
            label: 'My Amazing Store',
            amount: amount
          },

          // We recommend collecting billing address information, at minimum
          // billing postal code, and passing that billing postal code with
          // all Apple Pay transactions as a best practice.
          requiredBillingContactFields: ["postalAddress"]
        });
        
        logElem.append(`<div>CountryCode: ${paymentRequest.countryCode}</div>`);;
        logElem.append(`<div>CurrencyCode: ${paymentRequest.currencyCode}</div>`);
        logElem.append(`<div>Merchant Capabilities: ${paymentRequest.merchantCapabilities}</div>`);
        logElem.append(`<div>Supported Networks: ${paymentRequest.supportedNetworks}</div>`);
      

        var button = document.querySelector('#apple-pay-button');

        button.addEventListener('click', function (event) {

          event.preventDefault();
          var session = new ApplePaySession(3, paymentRequest);

          session.onvalidatemerchant = function (event) {
            applePayInstance.performValidation({
              validationURL: event.validationURL,
              displayName: 'My Store'
            }).then(function (merchantSession) {
              session.completeMerchantValidation(merchantSession);
            }).catch(function (validationErr) {
              // You should show an error to the user, e.g. 'Apple Pay failed to load.'
              alert(validationErr);
              console.error('Error validating merchant:', validationErr);
              session.abort();
            });
          };

          session.onpaymentauthorized = function (event) {
            var msg = `<div style="color:blue;font-size:1.2en"><b>Your shipping address is: ${JSON.stringify(event.payment.billingContact)}</b></div>`;
            logElem.append(msg);
            // $("#payment-authorized-payload").text(msg);
            // console.log(msg);

            applePayInstance.tokenize({
              token: event.payment.token
            }).then(function (payload) {

              // print callback payload.
              var msg1 = `nonce: ${payload.nonce}`;
              msg1 = msg1 + `billingPostalCode: ${event.payment.billingContact.postalCode}`;
              logElem.append(`<div>${msg1}</div>`);
              // If requested, address information is accessible in event.payment
              // and may also be sent to your server.
             
              $("#bt-tokenize-message").text(msg1);

              msg1 =  "SAVE TO VAULT: " + isSavePaymentMethodChecked;
              logElem.append(`<div>${msg1}</div>`);

              // Send payload.nonce to your server.
              $.ajax({
                type: 'POST',
                url: '/bt/vault/payment/checkout',
                data: {
                  'paymentMethodNonce': payload.nonce,
                  'amount': amount,
                  'currency': selectedCurrency,
                  'hf_save_for_next_purchase': isSavePaymentMethodChecked   //to store payment method in vault

                }
              }).done(function (result) {

                if (result.success) {

                  $('#checkout-message').html('<h1>Success</h1><p><a href="/">Home</a></p>');

                  var serverResultDiv = document.querySelector('#checkout-result');
                  $("#checkout-result").jsonViewer(result);


                } else {
                  logElem.append(`<div>Result Error: ${result}</div>`);
                  $('#checkout-message').html('<h1>Error</h1><p>Check your console.</p>');
                  $("#checkout-result").jsonViewer(result);
                }

                // After you have transacted with the payload.nonce,
                // call `completePayment` to dismiss the Apple Pay sheet.
                session.completePayment(ApplePaySession.STATUS_SUCCESS);
              }).catch(function (tokenizeErr) {
                var errMsg = `'Error tokenizing Apple Pay' ${tokenizeErr}`;
                $("#bt-tokenize-message").text(errMsg);
                console.error(errMsg);
                session.completePayment(ApplePaySession.STATUS_FAILURE);
              });


            });


          };


          session.begin();
        });



        console.log(applePayInstance);
        $("#apple-pay-button").show();
        $("#loading-button").hide();



      }).catch(function (err) {
        // Handle error
      });
    }
    else {
      $("#apple-pay-button").show();
      $("#loading-button").hide();

    }

  }


</script>