<div><a href="/">Home</a></div>
<h1>{{title}}</h1>

<div class="loading" id="loading-button">Loading paypal button...</div>
<div id="paypal-button-container"></div>
<br />
<div id="paypal-shipping-container">&nbsp;</div>
<br />
<div id="paypal-result-container"></div>
<script
  src="https://www.paypal.com/sdk/js?components=buttons&client-id=AaLfG87rC4XN5QisWLhUw27uFUE0KypDXHNySFuya-jNbzKIE4s4a6Yu2q8ylFhMPgw3KflYRGc8Uhjz"></script>

<script>
  const baseOrderAmount = "100.00";
  var purchase_units = [
    {
      "reference_id": "b16b98ad-08b1-4f4c-83db-8f7ed4df6559",
      "amount": {
        "currency_code": "USD",
        "value": baseOrderAmount
      },
      shipping: {
        options: [
        {
            id: "SHIP_000",
            label: "Select Shipping Method",
            type: "SHIPPING",
            selected: true,
            amount: {
              value: "0.00",
              currency_code: "USD"
            }
          },
          {
            id: "SHIP_123",
            label: "Domestic Shipping",
            type: "SHIPPING",
            selected: false,
            amount: {
              value: "3.00",
              currency_code: "USD"
            }
          },
          {
            id: "SHIP_456",
            label: "International Shipping",
            type: "SHIPPING",
            selected: false,
            amount: {
              value: "13.00",
              currency_code: "USD"
            }
          },
          {
            id: "SHIP_789",
            label: "Pick up in Store",
            type: "PICKUP",
            selected: false,
            amount: {
              value: "0.00",
              currency_code: "USD"
            }
          }
        ]
      }
    }
  ];
  const shippingContainer = document.querySelector("#paypal-shipping-container");
  $("#loading-button").show();

  // var ppApi = "/ppapi/payment/create";
  var ppApi = "/ppapi/order";
  var isOrdersV2 = ppApi.indexOf("/order") > -1;

  paypal.Buttons({

    // Sets up the transaction when a payment button is clicked
    createOrder: function (data, actions) {
      // Using actions.order.create is NOT RECOMMENDED approach (BTW - default is orders v2)
      // return actions.order.create(orderDataV2);
      // RECOMMENDED: call merchant api to create order
      let orderDataV2 = {
        intent: "CAPTURE",
        payer: { payment_method: "paypal" },
        purchase_units

      };

      // using payments v1

      let paymentDataV1 = {
        intent: "sale",
        payer: {
          payment_method: "paypal"
        },
        transactions: [
          {
            amount: {
              currency: "USD",
              total: "125.00"
            },
            item_list: {
              items: [
                {
                  currency: "USD",
                  name: "House of Bruar",
                  price: "125.00",
                  quantity: "1"
                }
              ]
            }
          }
        ]
      }


      return (fetch(ppApi, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: isOrdersV2 ? JSON.stringify(orderDataV2) : JSON.stringify(paymentDataV1)
      }).then((response) => response.json())
        .then((order) => isOrdersV2 ? order.id : order.token));
    },

    // how to change the total price based on different shipping options and patch the order with updated amount based on selected shipping method
    /*DEPRECARTED
    onShippingChange: function (data, actions) {
      
      
      console.log(data);
      console.log("SELECTED_OPTION", data.selected_shipping_option); // data.selected_shipping_option contains the selected shipping option
      // NOTE: data.selected_shipping_option_id contains the selected shipping ID
      // passed to the `actions.order.create()` call
      {{!-- data.amount.value =
        parseFloat(baseOrderAmount, 10) +
        parseFloat(data.selected_shipping_option.amount.value, 10); --}}
      // Here you can also check the data.shipping_address (reruned from PP review screen) if it is address your business support shipping to.
      var shippingContainer = document.querySelector("#paypal-shipping-container");
      shippingContainer.innerHTML = `<p><b>Shipping address:</b> ${JSON.stringify(data.shipping_address)}</p><p><b>Selected Shipping Method:</b> ${JSON.stringify(data.selected_shipping_option)}</p>`
      
      if (isOrdersV2) {
        
        return fetch("/ppapi/order", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderID: data.orderID,
            selectedShippingOption: data.selected_shipping_option,
            baseOrderAmount,
            updatedAddress: {
              recipient_name: "Ifeanyi Ezenagu",
              phone: "+12404443411",
              line1: "12809 RICKER RD",
              city: "UPPER MARLBORO",
              country_code: "US",
              postal_code: "20772",
              state: "MD"
            }
          })
        });
               
        
      }
      else {  //payment v1

        // option2:  PATCH the order on the merchant Server - to force using payments v1

        return fetch("/ppapi/payment/update", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderID: data.orderID,
            selectedShippingOption: data.selected_shipping_option,
            baseOrderAmount,
            updatedAddress: {
              recipient_name: "Ifeanyi Ezenagu",
              phone: "+12404443411",
              line1: "12809 RICKER RD",
              city: "UPPER MARLBORO",
              country_code: "US",
              postal_code: "20772",
              state: "MD"
            }
          })
        });
      }
    },
*/
    /*NEW VERSION*/
    onShippingOptionsChange: function (data, actions) {
      console.log("SELECTED_OPTION", data.selectedShippingOption); // data.selectedShippingOption contains the selected shipping option
      // NOTE: data.selected_shipping_option_id contains the selected shipping ID
      // Here you can also check the data.shipping_address (reruned from PP review screen) if it is address your business support shipping to.
      var shippingContainer = document.querySelector("#paypal-shipping-container");
      shippingContainer.innerHTML = `<p><b>Shipping address:</b> ${JSON.stringify(data.shippingAddress)}</p><p><b>Selected Shipping Method:</b> ${JSON.stringify(data.selectedShippingOption)}</p>`

      let payload = {
        orderID: data.orderID,
        selectedShippingOption: data.selectedShippingOption,
        baseOrderAmount,
        updatedAddress: data.shippingAddress
      };
      if (isOrdersV2) {

        return fetch("/ppapi/order", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload)
        });


      }
      else {  //payment v1

        // option2:  PATCH the order on the merchant Server - to force using payments v1

        return fetch("/ppapi/payment/update", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderID: data.orderID,
            selectedShippingOption: data.selectedShippingOption,
            baseOrderAmount,
            updatedAddress: {
              recipient_name: "Ifeanyi Ezenagu",
              phone: "+12404443411",
              line1: "12809 RICKER RD",
              city: "UPPER MARLBORO",
              country_code: "US",
              postal_code: "20772",
              state: "MD"
            }
          })
        });
      }

    },
    onShippingAddressChange: function (data, actions) {
      console.log("SELECTED_ADDRESS", data.shippingAddress); // data.selectedShippingOption contains the selected shipping option
      // Here you can also check the data.shipping_address (reruned from PP review screen) if it is address your business support shipping to.
      if(data.shippingAddress.state=="IL") {
       var myWindow = window.open("", "Error","width=330,height=200,location=no,left=600,top=500,menubar=no,resizeable=no,toolbar=no,titlebar=no");
       myWindow.document.write("<p>we do not ship to: " + data.shippingAddress.state+"</p>");
       // alert("we do not ship to " + data.shippingAddress.state);
        console.log("data: ", data);
        console.log("actions: ", actions);
        return actions.reject("we DO NOT");
        
      }
      var shippingContainer = document.querySelector("#paypal-shipping-container");
      shippingContainer.innerHTML = `<p><b>Shipping address:</b> ${JSON.stringify(data.shippingAddress)}</p><p><b>Selected Shipping Method:</b> ${JSON.stringify(data.selectedShippingOption)}</p>`

      let payload = {
        orderID: data.orderID,
        selectedShippingOption: data.selectedShippingOption,
        baseOrderAmount,
        updatedAddress: data.shippingAddress
      };
      if (isOrdersV2) {

        return fetch("/ppapi/order", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload)
        });


      }
      else {  //payment v1

        // option2:  PATCH the order on the merchant Server - to force using payments v1

        return fetch("/ppapi/payment/update", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderID: data.orderID,
            selectedShippingOption: data.selectedShippingOption,
            baseOrderAmount,
            updatedAddress: {
              recipient_name: "Ifeanyi Ezenagu",
              phone: "+12404443411",
              line1: "12809 RICKER RD",
              city: "UPPER MARLBORO",
              country_code: "US",
              postal_code: "20772",
              state: "MD"
            }
          })
        });
      }

    },

    // Finalize the transaction after payer approval
    onApprove: function (data, actions) {
      console.log("onApprove", data)
      if (isOrdersV2) {
        //Option 1: Use client side method to capture payment (DEPRACATED Approach). This will call orders V2 by default.
        return actions.order.capture().then(function (orderData) {
          // Successful capture! For dev/demo purposes:
          let resultJson = JSON.stringify(orderData, null, 2);
          console.log('Capture result', orderData, resultJson)
          var transaction = orderData.purchase_units[0].payments.captures[0];
          // alert('Transaction ' + transaction.status + ': ' + transaction.id + '\n\nSee console for all available details');
          $('#paypal-result-container').text(resultJson);
        }).catch(function (err) {
          // Failed capture
          console.log(err);
        });


      }
      else {  //payments v1
        //Option 2: Call merchant server - Server Approach - best practice.
        return fetch("/ppapi/payment/execute-payment", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ paymentId: order.paymentId })
        }).then((response) => response.json())
          .then((orderData) => {
            // Three cases to handle:
            //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
            //   (2) Other non-recoverable errors -> Show a failure message
            //   (3) Successful transaction -> Show confirmation or thank you

            // This example reads a v2/checkout/orders capture response, propagated from the server
            // You could use a different API or structure for your 'orderData'
            const errorDetail = Array.isArray(orderData.details) && orderData.details[0];

            // Recoverable state, per:
            // https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
            if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
              return actions.restart();
            }

            if (errorDetail) {
              console.error('Sorry, your transaction could not be processed.', errorDetail);
            }

            // Successful capture! For demo purposes:
            console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
          }).catch(function (err) {
            // Failed capture
            console.log(err);
          });

      }



    }
  }).render('#paypal-button-container').then(function () {
    $("#loading-button").hide();
  });


</script>